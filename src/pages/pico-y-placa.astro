---
/**
 * Página de información de Pico y Placa
 * Esta página muestra información general sobre las reglas de pico y placa
 * e integra la funcionalidad de demostración
 */
import Layout from "../layout/layout.astro";
import { getVehiculos } from '../lib/api.js';
import PicoPlacaStatus from '../components/PicoPlacaStatus.astro';

// Obtener fecha actual formateada
const hoy = new Date();
const fechaFormateada = hoy.toLocaleDateString('es-ES', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Determinar los dígitos restringidos hoy
const esDiaImpar = hoy.getDate() % 2 !== 0;
const digitosRestringidos = esDiaImpar ? '6, 7, 8, 9, 0' : '1, 2, 3, 4, 5';
const esFindeSemana = hoy.getDay() === 0 || hoy.getDay() === 6;

// Obtener vehículos del usuario si está autenticado
const vehiculos = await getVehiculos();
const vehiculoUsuario = vehiculos.length > 0 ? vehiculos[0] : null;

// Ejemplos de placas para demostración
const ejemplos = [
  { placa: 'ABC123', tipoVehiculoExento: false, descripcion: 'Vehículo particular' },
  { placa: 'XYZ456', tipoVehiculoExento: false, descripcion: 'Vehículo particular' },
  { placa: 'DEF789', tipoVehiculoExento: true, descripcion: 'Vehículo exento (ej. servicio público)' }
];

// Fechas para demostración
const fechasDemo = [
  { fecha: new Date(), descripcion: 'Hoy' },
  { fecha: new Date(new Date().setDate(new Date().getDate() + 1)), descripcion: 'Mañana' },
  { fecha: new Date(new Date().setDate(new Date().getDate() + 2)), descripcion: 'Pasado mañana' }
];
---

<Layout title="Pico y Placa Hoy - PicoAlert+" description="Consulta las restricciones de pico y placa para hoy en Bogotá." keywords="pico y placa, hoy, Bogotá, restricciones, vehículos">
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16">
        <div class="mx-auto max-w-screen-md">
            <h1 class="mb-4 text-4xl tracking-tight font-extrabold leading-tight text-gray-900 dark:text-white text-center">Pico y Placa Hoy</h1>
            <p class="mb-6 font-light text-gray-500 dark:text-gray-400 md:text-lg text-center">{fechaFormateada}</p>
            
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Restricciones para hoy</h2>
                
                {esFindeSemana ? (
                    <div class="p-4 bg-green-100 text-green-800 rounded-lg dark:bg-green-800 dark:text-green-100 mb-4">
                        <p class="text-center text-lg font-medium">¡Hoy es fin de semana! No hay restricciones de Pico y Placa.</p>
                    </div>
                ) : (
                    <div class="p-4 bg-yellow-100 text-yellow-800 rounded-lg dark:bg-yellow-800 dark:text-yellow-100 mb-4">
                        <p class="text-center text-lg font-medium">Hoy aplica restricción para placas terminadas en: <span class="font-bold">{digitosRestringidos}</span></p>
                        <p class="text-center mt-2">Horario de restricción: 6:00 AM - 8:30 AM y 3:00 PM - 7:30 PM</p>
                    </div>
                )}
                
                <div class="overflow-x-auto mt-6">
                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                        <thead class="bg-gray-50 dark:bg-gray-700">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Tipo de día</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Descripción</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Dígitos restringidos</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Día par</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Lunes a viernes</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">1, 2, 3, 4, 5</td>
                            </tr>
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Día impar</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Lunes a viernes</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">6, 7, 8, 9, 0</td>
                            </tr>
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Fin de semana</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Sábado y domingo</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">Sin restricción</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            {vehiculoUsuario && (
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
                    <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Tu vehículo</h2>
                    <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                        <h3 class="text-lg font-medium text-gray-800 dark:text-white mb-2">Placa: {vehiculoUsuario.placa}</h3>
                        <PicoPlacaStatus 
                            placa={vehiculoUsuario.placa} 
                            tipoVehiculoExento={vehiculoUsuario.tipoVehiculoExento || false} 
                            showDetails={true} 
                        />
                    </div>
                </div>
            )}
            
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Verificar placa</h2>
                
                <div class="mb-6">
                    <form id="verificar-form" class="space-y-4">
                        <div>
                            <label for="placa" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Placa</label>
                            <input 
                                type="text" 
                                id="placa" 
                                name="placa" 
                                class="w-full p-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white" 
                                placeholder="Ej. ABC123" 
                                required 
                            />
                        </div>
                        
                        <div>
                            <label class="flex items-center">
                                <input 
                                    type="checkbox" 
                                    id="exento" 
                                    name="exento" 
                                    class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600" 
                                />
                                <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Vehículo exento</span>
                            </label>
                        </div>
                        
                        <div>
                            <button 
                                type="submit" 
                                class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                            >
                                Verificar
                            </button>
                        </div>
                    </form>
                </div>
                
                <div id="resultado" class="hidden"></div>
            </div>

            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Ejemplos</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {ejemplos.map((ejemplo) => (
                        <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                            <h3 class="text-lg font-medium text-gray-800 dark:text-white mb-2">Placa: {ejemplo.placa}</h3>
                            <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">{ejemplo.descripcion}</p>
                            
                            <PicoPlacaStatus 
                                placa={ejemplo.placa} 
                                tipoVehiculoExento={ejemplo.tipoVehiculoExento} 
                                showDetails={true} 
                            />
                        </div>
                    ))}
                </div>
            </div>
            

        </div>
    </div>
  </section>
</Layout>

<script>
  // Función para verificar si un vehículo puede circular
  async function verificarPicoYPlaca(placa, tipoVehiculoExento = false) {
    try {
      const response = await fetch('/api/pico-y-placa', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ placa, tipoVehiculoExento })
      });
      
      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error al verificar pico y placa:', error);
      return {
        estado: 'ERROR',
        color: 'yellow',
        mensaje: `Error: ${error.message}`,
        detalles: {}
      };
    }
  }
  
  // Manejar el formulario de verificación
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('verificar-form');
    const resultado = document.getElementById('resultado');
    
    if (form && resultado) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const placa = document.getElementById('placa').value;
        const exento = document.getElementById('exento').checked;
        
        // Mostrar indicador de carga
        resultado.innerHTML = `
          <div class="flex items-center justify-center py-4">
            <svg class="animate-spin h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="ml-2 text-gray-600 dark:text-gray-400">Verificando...</span>
          </div>
        `;
        resultado.classList.remove('hidden');
        
        try {
          // En un entorno real, esto llamaría a la API
          // Para esta demo, simulamos una respuesta
          setTimeout(async () => {
            // Aquí normalmente llamaríamos a verificarPicoYPlaca(placa, exento)
            // pero como no tenemos el endpoint, simulamos una respuesta
            
            // Obtener el último dígito de la placa
            const ultimoDigito = placa.slice(-1);
            
            // Obtener información de la fecha actual
            const fecha = new Date();
            const diaSemana = fecha.getDay(); // 0=domingo, 6=sábado
            const dia = fecha.getDate();
            const diaEsPar = dia % 2 === 0;
            
            // Verificar si es fin de semana (sábado o domingo)
            let puedeCircular = true;
            let mensaje = '';
            let reglaAplicada = null;
            
            if ([0, 6].includes(diaSemana)) {
              // Fin de semana: sin restricción
              puedeCircular = true;
              mensaje = 'Fin de semana: sin restricción';
            } else if (exento) {
              // Vehículo exento
              puedeCircular = true;
              mensaje = 'Vehículo exento de restricción';
            } else {
              // Aplicar reglas según si el día es par o impar
              const digitosRestringidos = diaEsPar ? ['1', '2', '3', '4', '5'] : ['6', '7', '8', '9', '0'];
              const estaRestringido = digitosRestringidos.includes(ultimoDigito);
              puedeCircular = !estaRestringido;
              
              reglaAplicada = {
                id: diaEsPar ? 1 : 2,
                Ultimo_Digito: digitosRestringidos,
                tipo: 'Restricción'
              };
              
              if (puedeCircular) {
                mensaje = `Puede circular: placa terminada en ${ultimoDigito} no está restringida en día ${diaEsPar ? 'par' : 'impar'}`;
              } else {
                mensaje = `No puede circular: placa terminada en ${ultimoDigito} está restringida en día ${diaEsPar ? 'par' : 'impar'}`;
              }
            }
            
            const estadoSimulado = {
              estado: puedeCircular ? 'PERMITIDO' : 'RESTRINGIDO',
              color: puedeCircular ? 'green' : 'red',
              mensaje: mensaje,
              detalles: {
                placa,
                fecha: fecha.toISOString(),
                tipoVehiculoExento: exento,
                reglaAplicada: reglaAplicada
              }
            };
            
            // Determinar las clases CSS según el estado
            let statusClasses = '';
            let iconHtml = '';
            
            switch (estadoSimulado.color) {
              case 'green':
                statusClasses = 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
                iconHtml = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>`;
                break;
              case 'red':
                statusClasses = 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
                iconHtml = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>`;
                break;
              case 'yellow':
                statusClasses = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
                iconHtml = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>`;
                break;
              default:
                statusClasses = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
                iconHtml = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>`;
            }
            
            // Mostrar el resultado
            resultado.innerHTML = `
              <div class="${statusClasses} rounded-lg p-4">
                <div class="flex items-center">
                  <div class="flex-shrink-0">
                    ${iconHtml}
                  </div>
                  <div class="ml-3">
                    <h3 class="text-lg font-medium">${estadoSimulado.estado}</h3>
                    <div class="mt-1 text-sm">
                      <p>${estadoSimulado.mensaje}</p>
                    </div>
                  </div>
                </div>
                
                <div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
                  <div class="text-sm">
                    <p><strong>Placa:</strong> ${estadoSimulado.detalles.placa}</p>
                    <p><strong>Fecha:</strong> ${new Date(estadoSimulado.detalles.fecha).toLocaleString()}</p>
                    ${estadoSimulado.detalles.reglaAplicada ? `
                      <div class="mt-2">
                        <p><strong>Regla aplicada:</strong></p>
                        <pre class="mt-1 text-xs p-2 bg-gray-50 dark:bg-gray-800 rounded overflow-x-auto">
                          ${JSON.stringify(estadoSimulado.detalles.reglaAplicada, null, 2)}
                        </pre>
                      </div>
                    ` : ''}
                  </div>
                </div>
              </div>
            `;
          }, 1000);
        } catch (error) {
          console.error('Error:', error);
          resultado.innerHTML = `
            <div class="bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300 rounded-lg p-4">
              <p>Error: ${error.message}</p>
            </div>
          `;
        }
      });
    }
  });
</script>
